/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript { final scriptHandler ->
    apply from: "$rootDir/config/gradle/dependencies.gradle"
    apply from: "$rootDir/version.gradle"

    defaultRepositories(scriptHandler)
    dependencies {
        classpath deps.build.guava
        classpath deps.build.gradlePlugins.protobuf
        classpath deps.build.gradlePlugins.errorProne
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
        classpath "io.spine.tools:spine-proto-js-plugin:$spineBaseVersion"
    }
    forceConfiguration(scriptHandler)
}

apply from: 'version.gradle'

ext {
    credentialsPropertyFile = 'credentials.properties'

    projectsToPublish = [
            'web',
            'firebase-web'
    ]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    // Use the same version numbering for the Spine Base library.
    version = versionToPublish
    group = 'io.spine'
}

subprojects {
    buildscript { final scriptHandler ->
        apply from: "$rootDir/version.gradle"

        defaultRepositories(scriptHandler)

        dependencies {
            classpath deps.build.guava
        }

        forceConfiguration(scriptHandler)
    }

    ext {
        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"
    }

    apply plugin: 'java-library'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'maven-publish'
    apply plugin: 'pmd'

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    apply from: deps.scripts.javacArgs
    apply from: deps.scripts.pmd
    apply from: deps.scripts.projectLicenseReport

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    defaultRepositories(project)

    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac

        implementation deps.build.guava
        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations

        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
        testImplementation deps.test.mockito
        testImplementation deps.test.hamcrest
        testImplementation "io.spine:spine-testutil-client:$spineVersion"
    }

    forceConfiguration(project)
    configurations.all({
        resolutionStrategy {

            /**
             * Force transitive dependencies of 3rd party components. 
             * Common 3rd party dependencies are forced by {@code forceConfiguration()} calls above.
             * 
             * The forced versions are selected as the highest among detected in the version 
             * conflict. Developers <em>may</em> select a higher version as the dependency in
             * this project <em>IFF</em> this dependency is used directly or a newer version 
             * fixes a security issue.
             * 
             * {@code proto-google-common-protos} starting with version {@code 1.1.0}
             * and {@code proto-google-iam-v1} starting with version {@code 0.1.29}
             * include Protobuf message definitions alongside with compiled Java.
             * This breaks the Spine compiler which searches for all Protobuf definitions 
             * in classpath, and assumes they implement the Type URLs.
             */
            force (
                    "io.opencensus:opencensus-api:0.21.0",
                    "io.opencensus:opencensus-contrib-http-util:0.18.0",

                    "io.grpc:grpc-core:$deps.versions.grpc",
                    "io.grpc:grpc-stub:$deps.versions.grpc",
                    "io.grpc:grpc-okhttp:$deps.versions.grpc",
                    "io.grpc:grpc-protobuf:$deps.versions.grpc",
                    "io.grpc:grpc-netty:$deps.versions.grpc",
                    "io.grpc:grpc-context:$deps.versions.grpc",
                    "io.grpc:grpc-stub:$deps.versions.grpc",
                    "io.grpc:grpc-protobuf:$deps.versions.grpc",
                    "io.grpc:grpc-core:$deps.versions.grpc",

                    "com.google.code.gson:gson:2.7",
                    "com.google.api:api-common:1.7.0",
                    "com.google.api.grpc:proto-google-common-protos:1.0.0",
                    "com.google.api.grpc:proto-google-iam-v1:0.1.28",

                    "com.google.oauth-client:google-oauth-client:1.25.0",

                    "com.google.auth:google-auth-library-credentials:0.11.0",
                    "com.google.auth:google-auth-library-oauth2-http:0.11.0",
                    
                    "com.google.j2objc:j2objc-annotations:1.3",

                    "com.google.http-client:google-http-client:1.29.0",
                    "com.google.http-client:google-http-client-jackson2:1.29.0",
                    
                    "com.google.api-client:google-api-client:1.25.0",

                    "org.apache.httpcomponents:httpclient:4.5.5",

                    "com.fasterxml.jackson.core:jackson-core:2.9.9",
                    "commons-collections:commons-collections:3.2.2",

                    "io.netty:netty-common:4.1.34.Final",
                    "io.netty:netty-buffer:4.1.34.Final",
                    "io.netty:netty-transport:4.1.34.Final",
                    "io.netty:netty-handler:4.1.34.Final",
                    "io.netty:netty-codec-http:4.1.34.Final",
                    
                    "javax.servlet:javax.servlet-api:$servletApiVersion", // see version.gradle

                    "org.eclipse.jetty.orbit:javax.servlet.jsp:2.2.0.v201112011158",
                    "org.eclipse.jetty.toolchain:jetty-schemas:3.1",

                    // Transitive dependencies from `core-java` may have different (older) versions.
                    "io.spine:spine-base:$spineBaseVersion",
                    "io.spine:spine-testlib:$spineBaseVersion"
            )
        }
    })

    sourceSets {
        main {
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$sourcesRootDir/main/resources", "$generatedRootDir/main/resources"
        }
        test {
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$sourcesRootDir/test/resources", "$generatedRootDir/test/resources"
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set("sources")
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        archiveClassifier.set("test")
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "$projectDir/build/docs/javadoc"
        archiveClassifier.set("javadoc")
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish
apply from: deps.scripts.repoLicenseReport
apply from: deps.scripts.generatePom
