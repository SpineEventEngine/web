/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript { final scriptHandler ->
    apply from: "$rootDir/config/gradle/dependencies.gradle"
    apply from: "$rootDir/version.gradle"

    defaultRepositories(scriptHandler)

    dependencies {
        classpath deps.build.guava
        classpath deps.build.gradlePlugins.protobuf
        classpath deps.build.gradlePlugins.errorProne
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
        classpath "io.spine.tools:spine-proto-js-plugin:$spineBaseVersion"
    }

    configurations.all({
        resolutionStrategy {
            force deps.build.guava
            force deps.test.guavaTestlib
        }
    })
}

plugins {
    id 'io.spine.tools.gradle.bootstrap' version '0.15.4' apply false
    id 'net.ltgt.errorprone' version deps.versions.errorPronePlugin apply false
}

apply from: 'version.gradle'

ext {
    credentialsPropertyFile = 'credentials.properties'

    projectsToPublish = [
            'web',
            'firebase-web'
    ]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    // Use the same version numbering for the Spine Base library.
    version = versionToPublish
    group = 'io.spine'
}

subprojects {
    buildscript { final scriptHandler ->
        apply from: "$rootDir/version.gradle"

        defaultRepositories(scriptHandler)

        dependencies {
            classpath deps.build.guava
        }

        configurations.all({
            resolutionStrategy {
                force deps.build.guava
            }
        })
    }

    ext {
        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"
    }

    apply plugin: 'java-library'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'maven-publish'
    apply plugin: 'pmd'

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    apply from: deps.scripts.javacArgs
    apply from: deps.scripts.pmd
    apply from: deps.scripts.projectLicenseReport

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    defaultRepositories(project)

    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac

        implementation deps.build.guava
        implementation deps.build.slf4j
        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations

        testImplementation deps.test.slf4j
        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
        testImplementation deps.test.mockito
        testImplementation deps.test.hamcrest
        testImplementation "io.spine:spine-testutil-client:$spineVersion"
    }

    configurations.all({
        resolutionStrategy {
            /**
             * {@code proto-google-common-protos} starting with version {@code 1.1.0}
             * and {@code proto-google-iam-v1} starting with version {@code 0.1.29}
             * include Protobuf message definitions alongside with compiled Java.
             * This breaks the spine compiler which searches for all Protobuf definitions 
             * in classpath, and assumes they implement the Type URLs.
             */
            force "com.google.api.grpc:proto-google-common-protos:1.0.0"
            force "com.google.api.grpc:proto-google-iam-v1:0.1.28"
        }
    })

    sourceSets {
        main {
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$sourcesRootDir/main/resources", "$generatedRootDir/main/resources"
        }
        test {
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$sourcesRootDir/test/resources", "$generatedRootDir/test/resources"
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set("sources")
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        archiveClassifier.set("test")
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "$projectDir/build/docs/javadoc"
        archiveClassifier.set("javadoc")
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish
apply from: deps.scripts.repoLicenseReport
