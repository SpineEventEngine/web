//
// Copyright 2019, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.web.firebase.subscription;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.web.firebase.subscription.diff";
option java_multiple_files = true;
option java_outer_classname = "DiffProto";

// A diff of the Firebase storage state to an actual state of entities
// used to execute updates on Firebase storage.
//
message Diff {
    repeated AddedItem added = 1;
    repeated RemovedItem removed = 2;
    repeated ChangedItem changed = 3;
}

// A record marking a subscription update with newly added entity.
//
message AddedItem {

    // JSON serialized entity data.
    string data = 1 [(required) = true];
}

// A record marking a subscription update with an entity that was removed.
//
message RemovedItem {

    // A Firebase key of an entity relative to the subscription root.
    string key = 1 [(required) = true];
}

// A record marking a subscription update with an entity change.
//
message ChangedItem {

    // A Firebase key of an entity relative to the subscription root.
    string key = 1 [(required) = true];

    // JSON serialized entity data.
    string data = 2 [(required) = true];
}

// An update of a single entry in Firebase database to be performed.
//
message EntryUpdate {

    // A Firebase key of an entity relative to the subscription root.
    string key = 1;

    // JSON serialized entity data.
    string data = 2;

    // An operation to be performed with this entry in the Firebase storage.
    Operation operation = 3;

    enum Operation {
        PASS = 0;
        ADD = 1;
        REMOVE = 2;
        CHANGE = 3;
    }
}
