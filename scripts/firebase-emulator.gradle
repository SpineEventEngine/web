/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Apply this script to enable tasks for emulating the Firebase server for local development.
 *
 * Emulating of the Firebase server relies on the `firebase-server` NPM library that
 * must be installed globally. To install `firebase-server` globally run the following command:
 * ```
 *  npm install -g firebase-server
 * ```
 * This package installs a CLI script called `firebase-server` that is further used
 * to emulate the Firebase server.
 */

final def FIREBASE_EMULATOR_TASK_GROUP = "Firebase emulator"

/** The local port to run Firebase Server emulator. */
final def localPort = 5000

/** The path to the Firebase Realtime Database security rules. */
final def rulesFilePath = "$rootDir${File.separatorChar}scripts${File.separatorChar}firebase-rules.json"

/** The path to the temporary file storing the identifier of a currently running emulator process. */
final def pidFilePath = "$rootDir${File.separatorChar}scripts${File.separatorChar}firebase-emulator.pid"

/**
 * Returns an extension of a script file depending on the environment operation system.
 *
 * @return "bat" if running on Windows, "sh" otherwise.
 */
static def osExtension() {
    final def runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    return runsOnWindows ? 'bat' : 'sh'
}

/**
 * Kills the process by PID.
 *
 * @param pid the PID of a process to kill
 */
void killProcess(final pid) {
    final def script = "$rootDir${File.separatorChar}scripts${File.separatorChar}kill-process.${osExtension()}"
    final def params = " ${pid}"

    "${script}${params}".execute()
}

/**
 * Starts the Firebase server emulator.
 *
 * @param port          the local port to run the emulator on
 * @param rulesFilePath the path to the file with Firebase Realtime Database security rules
 * @param pidFilePath   the path to the file to store the PID of the emulator
 */
void startFirebase(final port, final rulesFilePath, final pidFilePath) {
    final def script = "$rootDir${File.separatorChar}scripts${File.separatorChar}start-firebase.${osExtension()}"
    final def params = " ${port} ${rulesFilePath} ${pidFilePath}"

    "${script}${params}".execute()
}

/**
 * Starts the Firebase server emulator with REST API enabled.
 * 
 * Stores the PID of the started emulator process to the "./scripts/firebase-emulator.pid" file.
 */
task startFirebase {
    group = FIREBASE_EMULATOR_TASK_GROUP
    description = "Starts local Firebase server emulator" +
            " using ./scripts/start-firebase-emulator scripts."

    doLast {
        startFirebase(localPort, rulesFilePath, pidFilePath)
    }
}

/**
 * Stops the currently running Firebase emulator by killing its process by PID.
 * 
 * The PID of a process to kill is taken from the "./scripts/firebase-emulator.pid". If the
 * file exists, kills the process specified, then deletes the file.
 */
task stopFirebase {
    group = FIREBASE_EMULATOR_TASK_GROUP
    description = "Stops local Firebase server emulator by killing its process by PID."

    doLast {
        final File pidFile = file(pidFilePath)

        if (pidFile.exists()) {
            final String pid = pidFile.text
            killProcess(pid)

            delete pidFile
        }
    }
}
