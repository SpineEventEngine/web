/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'com.github.psxpaul.execfork' version '0.1.10'
    id "org.gretty" version "2.3.1"
}

apply plugin: 'io.spine.tools.gradle.bootstrap'

spine.enableJava()

dependencies {
    implementation project(":firebase-web")
    implementation "io.spine:spine-server:$spineVersion"

    implementation "org.slf4j:slf4j-jdk14:$deps.versions.slf4j"
}

/**
 * The path to the temporary file storing the identifier
 * of a currently running Firebase emulator process.
 */
final pidFilePath = "$projectDir/scripts/firebase-emulator.pid"

/**
 * Runs the Firebase emulator locally for the tests purposes.
 * 
 * Relies on the `firebase-server` NPM library that is installed as `:web-tests`
 * module dependency. Stores the PID of the started emulator process to the
 * "./scripts/firebase-emulator.pid" file.
 */
task runFirebase(type: com.github.psxpaul.task.ExecFork) {
    description = "Starts local Firebase server emulator."

    final def clientDir = project(':web-tests').projectDir
    workingDir = "$clientDir/node_modules/.bin"

    final def runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    final def extension = runsOnWindows ? '.cmd' : ''

    executable = "$workingDir/firebase-server$extension"

    final def rulesFile = file("$projectDir/firebase-rules.json")
    args = ['--rules', rulesFile.getPath(), '--rest', '--pid', pidFilePath]

    waitForPort = 5000
}

/**
 * Stops the currently running Firebase emulator by killing its process by PID.
 *
 * The PID of a process to kill is taken from the "./scripts/firebase-emulator.pid". If the
 * file exists, kills the process specified, then deletes the file.
 */
task killFirebaseProcess {
    description = "Stops local Firebase server emulator by killing its process by PID."

    doLast {
        final File pidFile = file(pidFilePath)
        if (pidFile.exists()) {
            final def runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
            final def scriptExtension =  runsOnWindows ? 'bat' : 'sh'
            final def script = "$projectDir/scripts/kill-process.${scriptExtension}"
            final def params = " ${pidFile.text}"

            "${script}${params}".execute()

            delete pidFile
        }
    }
}

gretty {
    contextPath = '/'
    httpPort = 8080
    debugPort = 5005
    debugSuspend = true
    jvmArgs = ['-Dio.spine.tests=true', '-Xverify:none']
    servletContainer = 'jetty9'

    afterEvaluate {
        appStart.dependsOn runFirebase
        appBeforeIntegrationTest.dependsOn runFirebase
        appStartDebug.dependsOn runFirebase

        appStop.finalizedBy killFirebaseProcess
        appAfterIntegrationTest.finalizedBy killFirebaseProcess
    }
}
